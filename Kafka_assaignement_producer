import argparse
from uuid import uuid4
from six.moves import input
from confluent_kafka import Producer
from confluent_kafka.serialization import StringSerializer, SerializationContext, MessageField
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.json_schema import JSONSerializer
#from confluent_kafka.schema_registry import *
from typing import List
import mysql.connector
from mysql.connector import Error
import json

columns=['name', 'gender', 'email', 'country']

API_KEY = 'KI3UKMZVFHR72PPX'
ENDPOINT_SCHEMA_URL  = 'https://psrc-znpo0.ap-southeast-2.aws.confluent.cloud'
API_SECRET_KEY = '1WHoM+Rhb56T9+b1CnwIAHZBjSlqbJVQU+LFQxz6c+24aK+Mr/i1GfB2l3HW8vpE'
BOOTSTRAP_SERVER = 'pkc-l7pr2.ap-south-1.aws.confluent.cloud:9092'
SECURITY_PROTOCOL = 'SASL_SSL'
SSL_MACHENISM = 'PLAIN'
SCHEMA_REGISTRY_API_KEY = 'WIAZVKDD6D3EI3W4'
SCHEMA_REGISTRY_API_SECRET = 'DPkEt3ZvqKpAO3pVOiOkD519ezjrGYMXBt1B1qQf1Bnhq1yByZ2acozB1BFMAHv9'


def sasl_conf():

    sasl_conf = {'sasl.mechanism': SSL_MACHENISM,
                 # Set to SASL_SSL to enable TLS support.
                #  'security.protocol': 'SASL_PLAINTEXT'}
                'bootstrap.servers':BOOTSTRAP_SERVER,
                'security.protocol': SECURITY_PROTOCOL,
                'sasl.username': API_KEY,
                'sasl.password': API_SECRET_KEY
                }
    return sasl_conf



def schema_config():
    return {'url':ENDPOINT_SCHEMA_URL,
    
    'basic.auth.user.info':f"{SCHEMA_REGISTRY_API_KEY}:{SCHEMA_REGISTRY_API_SECRET}"

    }       





def delivery_report(err, msg):

    """
    Reports the success or failure of a message delivery.
    Args:
        err (KafkaError): The error that occurred on None on success.
        msg (Message): The message that was produced or failed.
    """

    if err is not None:
        print("Delivery failed for User record {}: {}".format(msg.key(), err))
        return
    print('User record {} successfully produced to {} [{}] at offset {}'.format(
        msg.key(), msg.topic(), msg.partition(), msg.offset()))
        
# Query the MySQL database
try:

    connection = mysql.connector.connect(
    host="localhost",
    user="abc",
    password="password",
    database="kafka"
    )
except Error as e:
    print("Error connecting to MySQL database:", e)
    exit()
query = "SELECT * FROM employee"
cursor = connection.cursor()
cursor.execute(query)
rows = cursor.fetchall()
column=cursor.column_names

class Employee:
    def __init__(self, record: dict):
        self.record = record


def Employee_to_dict():
    data = []
    for row in rows:
        emp = Employee(dict(zip(cursor.column_names, row)))
        data.append(emp)
        yield emp
        #print(data)


def get_employee_record(emp: Employee, ctx):
    return emp.record


def main(topic):
    schema_registry_conf = schema_config()
    schema_registry_client = SchemaRegistryClient(schema_registry_conf)
    # subjects = schema_registry_client.get_subjects()
    # print(subjects)
    subject = topic+'-value'

    schema = schema_registry_client.get_latest_version(subject)
    schema_str=schema.schema.schema_str

    string_serializer = StringSerializer('utf_8')
    json_serializer = JSONSerializer(schema_str, schema_registry_client, get_employee_record)

    producer = Producer(sasl_conf())

    print("Producing user records to topic {}. ^C to exit.".format(topic))
    #while True:
        # Serve on_delivery callbacks from previous calls to produce()
    producer.poll(0.0)
    i=0
    try:
        #data = []
        #for row in rows:
                #data.append(dict(zip(cursor.column_names, row)))
                #print(data)
               for emp in Employee_to_dict(): 
                    print(emp)
                    producer.produce(topic=topic,
                            key=string_serializer(str(uuid4())),
                            value=json_serializer(emp, SerializationContext(topic, MessageField.VALUE)),
                            on_delivery=delivery_report)
    except KeyboardInterrupt:
        pass
    except ValueError:
        print("Invalid input, discarding record...")
        pass

    #print("\nFlushing records...")
    producer.flush()

main("Employee_kafka")
